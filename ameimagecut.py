#meta developer: @thisLyomi & @AmekaMods

import io
import zipfile
from .. import loader, utils
from telethon import types
from telethon.tl.types import DocumentAttributeFilename
from PIL import Image

@loader.tds
class AmeImageCutMod(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–∑—Ä–µ–∑–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏."""
    
    strings = {"name": "AmeImageCut"}

    @loader.command()
    async def cut(self, message):
        """{–∫–æ–ª-–≤–æ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏} {–∫–æ–ª-–≤–æ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏} ‚Äî –†–∞–∑—Ä–µ–∑–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏."""
        imagesinzip = int() 
        args = utils.get_args(message)
        await message.edit("<emoji document_id=5220046725493828505>‚úçÔ∏è</emoji> <b>–û–∂–∏–¥–∞–π—Ç–µ...</b>") 
        if len(args) != 2:
            await message.edit("<emoji document_id=5220197908342648622>‚ùó</emoji> <b>–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–µ–π –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ –∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏. –ü—Ä–∏–º–µ—Ä:</b> <code>.cut 2 2</code>")
            return

        try:
            rows = int(args[0])
            cols = int(args[1])
        except ValueError:
            await message.edit("<emoji document_id=5220197908342648622>‚ùó</emoji> <b>–ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.</b>")
            return

        if rows > 10 or cols > 10:
            await message.edit(f"<emoji document_id=5220197908342648622>‚ùó</emoji> <b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–µ–π: 10 –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ –∏ 10 –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏.</b>")
            return
        
        reply = await message.get_reply_message()
        if not reply or not reply.media:
            await message.edit("<emoji document_id=5220197908342648622>‚ùó</emoji> <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑—Ä–µ–∑–∞–Ω–∏—è.</b>")
            return

        image = io.BytesIO()
        image = await reply.download_media(image)
        image = Image.open(image)

        width, height = image.size
        part_width = width // cols
        part_height = height // rows

        archive = io.BytesIO()
        with zipfile.ZipFile(archive, 'w') as zip_file:
            for row in range(rows):
                for col in range(cols):
                    left = col * part_width
                    top = row * part_height
                    right = left + part_width
                    bottom = top + part_height
                    part = image.crop((left, top, right, bottom))

                    part_io = io.BytesIO()
                    part.save(part_io, format="PNG")
                    part_io.seek(0)
                    imagesinzip += 1
                    part_filename = f"part_{row+1}_{col+1}.png"
                    zip_file.writestr(part_filename, part_io.read())
                    part_io.close()

        image.close()

        archive.seek(0)
        await message.delete() 
        await self.client.send_file(
            message.chat_id,
            file=archive,
            caption=f"<emoji document_id=5222148368955877900>üî•</emoji> <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑—Ä–µ–∑–∞–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {imagesinzip}.</b>",
            force_document=True,
            reply_to=reply,
            attributes=[DocumentAttributeFilename("cut_images.zip")]
        )
        
        archive.close()
mport io
import zipfile
from .. import loader, utils
from telethon import types
from telethon.tl.types import DocumentAttributeFilename
from PIL import Image

@loader.tds
class AmeImageCutMod(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–∑—Ä–µ–∑–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏."""
    
    strings = {"name": "AmeImageCut"}

    @loader.command()
    async def cut(self, message):
        """{–∫–æ–ª-–≤–æ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏} {–∫–æ–ª-–≤–æ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏} ‚Äî –†–∞–∑—Ä–µ–∑–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏."""
        imagesinzip = int() 
        args = utils.get_args(message)
        await message.edit("<emoji document_id=5220046725493828505>‚úçÔ∏è</emoji> <b>–û–∂–∏–¥–∞–π—Ç–µ...</b>") 
        if len(args) != 2:
            await message.edit("<emoji document_id=5220197908342648622>‚ùó</emoji> <b>–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–µ–π –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ –∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏. –ü—Ä–∏–º–µ—Ä:</b> <code>.cut 2 2</code>")
            return

        try:
            rows = int(args[0])
            cols = int(args[1])
        except ValueError:
            await message.edit("<emoji document_id=5220197908342648622>‚ùó</emoji> <b>–ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.</b>")
            return

        if rows > 10 or cols > 10:
            await message.edit(f"<emoji document_id=5220197908342648622>‚ùó</emoji> <b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–µ–π: 10 –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ –∏ 10 –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏.</b>")
            return
        
        reply = await message.get_reply_message()
        if not reply or not reply.media:
            await message.edit("<emoji document_id=5220197908342648622>‚ùó</emoji> <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑—Ä–µ–∑–∞–Ω–∏—è.</b>")
            return

        image = io.BytesIO()
        image = await reply.download_media(image)
        image = Image.open(image)

        width, height = image.size
        part_width = width // cols
        part_height = height // rows

        archive = io.BytesIO()
        with zipfile.ZipFile(archive, 'w') as zip_file:
            for row in range(rows):
                for col in range(cols):
                    left = col * part_width
                    top = row * part_height
                    right = left + part_width
                    bottom = top + part_height
                    part = image.crop((left, top, right, bottom))

                    part_io = io.BytesIO()
                    part.save(part_io, format="PNG")
                    part_io.seek(0)
                    imagesinzip += 1
                    part_filename = f"part_{row+1}_{col+1}.png"
                    zip_file.writestr(part_filename, part_io.read())
                    part_io.close()

        image.close()

        archive.seek(0)
        await message.delete() 
        await self.client.send_file(
            message.chat_id,
            file=archive,
            caption=f"<emoji document_id=5222148368955877900>üî•</emoji> <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑—Ä–µ–∑–∞–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {imagesinzip}.</b>",
            force_document=True,
            reply_to=reply,
            attributes=[DocumentAttributeFilename("cut_images.zip")]
        )
        
        archive.close()

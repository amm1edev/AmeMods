#meta developer: @amm1e

from .. import loader, utils
from telethon.tl.types import ChatBannedRights
from telethon.errors import RPCError
from telethon.tl.functions.channels import EditBannedRequest

@loader.tds
class DcToolMod(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å dc_id."""
    strings = {"name": "DcTool"}

    async def dcbancmd(self, message):
        """{dc_id} -- –ë–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º dc_id."""
        
        args = utils.get_args_raw(message)
        
        if not args.isdigit() or not (1 <= int(args) <= 5) or args == None:
            await utils.answer(message, "‚ùå <b>–û—à–∏–±–∫–∞:</b> <code>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5.</code>")
            return

        dc_id = int(args)
        dc_users = ""
        
        async for user in message.client.iter_participants(message.to_id):
            if not user.deleted:
                user_dc_id = user.to_dict().get("photo", {}).get("dc_id", "none")

                if user_dc_id == dc_id:
                    dc_users += f"\n<code>{user.id}</code>"
                    try:
                        if user.bot:
                            dc_users += " <b>(ü§ñ –ë–æ—Ç.)</b>"
                            continue
                        await message.client(EditBannedRequest(
                            message.chat_id,
                            user.id,
                            ChatBannedRights(until_date=None, view_messages=True)
                        ))
                        dc_users += " <b>(–ó–∞–±–∞–Ω–µ–Ω.)</b>" 
                    except RPCError as e:
                        dc_users += f" <b>(‚ùå –û—à–∏–±–∫–∞:</b> <code>{e}</code><b>)</b>"

        await message.respond(f"<b>‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å dc id {dc_id}:</b> \n{dc_users}")

    async def listdccmd(self, message):
        """-- –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –∏—Ö dc_id"""
        all = message.client.iter_participants(message.to_id)
        user_list = '' 

        async for user in all:
            if not user.deleted:
                dc_id = user.to_dict().get("photo", {}).get("dc_id", "none")
                user_info = f"<code>{user.id}</code>: <code>{dc_id}</code>"  
                try:
                    if user.bot:
                        user_info += " <b>(ü§ñ –ë–æ—Ç. )</b>"
                except:
                    pass
                user_list += f"\n{user_info}"
        
        await utils.answer(message, f"<b>‚úÖ –°–ø–∏—Å–æ–∫ dc_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> \n{user_list}")

    async def getdcidcmd(self, message):
        """[User_ID] -- –ü–æ–ª—É—á–∏—Ç—å dc_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–º–æ—â—å—é —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∞–π–¥–∏ –∏–ª–∏ —Ä–µ–ø–ª–∏. """
        
        reply = await message.get_reply_message()
        
        if reply:
            user = await message.client.get_entity(reply.sender_id) 
        else:
            args = utils.get_args(message)
            if args:
                try:
                    user = await message.client.get_entity(int(args[0]))
                except (ValueError, UserIdInvalidError):
                    await message.respond("<b>‚ùå –û—à–∏–±–∫–∞:</b><code> –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.</code>")
                    return
            else:
                await message.respond("<b>‚ùå –û—à–∏–±–∫–∞:</b><code> –ù–µ –Ω–∞–π–¥–µ–Ω —Ä–µ–ø–ª–∞–π –∏–ª–∏ ID –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.</code>")
                return

        dc_id = user.to_dict().get("photo", {}).get("dc_id", "none")

        await utils.answer(message, f"<b>‚úÖ DC ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> <code>{dc_id}</code>")